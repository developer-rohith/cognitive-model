
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.BadLocationException;
import java.awt.Color;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SAI
 */



public class vowelsform1 extends javax.swing.JFrame {

    /**
     * Creates new form sampleform1
     */
    static String user;
    private Highlighter highlighter;
private HighlightPainter painter;


     int i,cpre=0,j,temp=0;
    String s = new String();
    int k=0;
    int over=0;
    String[] str1;
    int score=0;
    String[] str ;
    int words=0;
    int total=0;
    int x=0;
   ActionEvent evt;
    int cnt=180;
    File file;
    public vowelsform1() {
         //final vowelsform1 v = new vowelsform1();
       
        ActionListener actListner;
       // clk = new JLabel();
         
        actListner = new ActionListener() {
            
            @Override
            
            public void actionPerformed(ActionEvent event) {
                
               
                clk.setText("remaining secs : "+cnt);
                //System.out.println(cnt);
                cnt=cnt-1;
                
                if(cnt==0)
                {
                    ((Timer)event.getSource()).stop();
                   
                   // JOptionPane.showMessageDialog(,"Time up", "MSG",JOptionPane.PLAIN_MESSAGE);
                    JOptionPane.showMessageDialog(clk, "Time Up");
                    JOptionPane.showMessageDialog(clk, "Your Final score is "+score+"out of "+words);
                
              
                     new menuform(user).setVisible(true);
         
                    
                }
            }
            
        };
  Timer timer = new Timer(1000, actListner);


  timer.start();
  
  
         
  
        initComponents();
       
        
    }
    
    
    private void hig() {                                          
        // TODO add your handling code here:
        
        try {
     highlighter = ta1.getHighlighter();
    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
     
    
            
           
         
            highlighter.addHighlight(10, 18, painter);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
        System.out.println("hello");
    
        
        
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text1 = new javax.swing.JTextField();
        b1 = new javax.swing.JButton();
        l1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta1 = new javax.swing.JTextArea();
        b2 = new javax.swing.JButton();
        clk = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        r2 = new javax.swing.JButton();
        skip = new javax.swing.JButton();
        cor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        text1.setMinimumSize(new java.awt.Dimension(20, 20));
        text1.setPreferredSize(new java.awt.Dimension(20, 20));

        b1.setText("replace all");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        ta1.setEditable(false);
        ta1.setColumns(20);
        ta1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        ta1.setLineWrap(true);
        ta1.setRows(5);
        ta1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(ta1);

        b2.setText("exit");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        clk.setText("remaining secs :");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("concealed word ");

        r2.setText("replace ");
        r2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2ActionPerformed(evt);
            }
        });

        skip.setText("skip");
        skip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipActionPerformed(evt);
            }
        });

        cor.setEditable(false);
        cor.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(193, 193, 193)
                                    .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(96, 96, 96)
                                    .addComponent(b1)
                                    .addGap(36, 36, 36)
                                    .addComponent(r2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(cor, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(skip)))
                        .addGap(18, 18, 18)
                        .addComponent(b2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clk, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clk, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(skip)
                                    .addComponent(cor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(102, 102, 102)
                                .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(b1)
                                    .addComponent(r2))
                                .addGap(73, 73, 73)))))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        // TODO add your handling code here:
        String inp;
        inp = text1.getText();

String dup;
        
for(i=0;i<str1.length;i++)
{
    String d;
d=str[i].substring(0,str[i].length()-1);
    if(str[i].charAt(str[i].length()-1)=='.' || str[i].charAt(str[i].length()-1)==',')
    {
        dup=str1[i].substring(0,str1[i].length()-1);
        if(dup.equals(inp)&&str[i].contains("*") && i==k)
{
      str[i]=str[i].replace(d,inp);
temp=1;  
x++;
    }
    }
if(str1[i].equals(inp)&&str[i].contains("*"))
{
str[i]=str[i].replace(str[i],inp);
temp=1;
 x++;
}
}
if(temp==1)
{
score=score+1;
if(x<total)
skipActionPerformed(evt);
else
{
    cor.setText("");
    over=1;
   // JOptionPane.showMessageDialog(this,"GAME IS OVER","MSG", JOptionPane.PLAIN_MESSAGE);
    //JOptionPane.showMessageDialog(this,"your score is "+score+" out of "+words ,"MSG", JOptionPane.PLAIN_MESSAGE);
}
temp=0;
}
StringBuilder sb2 = new StringBuilder();
	
for (String ch: str)
{
	
sb2.append(ch);
	
sb2.append(" ");	
}
 String dstr1=sb2.toString();
ta1.setText(dstr1);
//l1.setText("your score is "+score+" out of "+words);
text1.setText("");
if(over==1)
{
     JOptionPane.showMessageDialog(this, "Your Final score is "+score+"out of "+words);
            new menuform(user).setVisible(true);
          this.dispose();
}

    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(this,"your score is "+score+" out of "+words ,"MSG", JOptionPane.PLAIN_MESSAGE);
         Preferences userPrefs = Preferences.userRoot().node("sample");
         String retrievedValue = userPrefs.get("user", "default_value_if_not_found");
         userPrefs.putInt(retrievedValue, score);
         int le,ti;
         if(score<10)
         {
             le=1;
                 
         }
         else if(score>10 && score<20)
         {
             le=2;
                 
         }
         else
         {
             le=3;
                
         }
         
         
         if(score*7>=(180-cnt))
         {
             ti=3;
         }
         
             else if(score*9>=(180-cnt))
             {
                 ti=2;
             }
         else
             {
                 ti=1;
             }
         
        
         userPrefs.putInt("vow", le);
         userPrefs.putInt("vowti", ti);
         userPrefs.putInt("vowt",cnt);
         
         
       
         try {
             
             Thread.sleep(1000);
             
         } catch (InterruptedException ex) {
             Logger.getLogger(vowelsform1.class.getName()).log(Level.SEVERE, null, ex);
         }
        
          new menuform(user).setVisible(true);
          this.dispose();
       
    }//GEN-LAST:event_b2ActionPerformed

    private void skipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipActionPerformed
        // TODO add your handling code here:
        if(k<str.length-1)
        {
        k++;
        
         while(!str[k].contains("*") && k<str.length)
         {
             k++;
         }
         if(k<=str.length)
         {
              String d = null;
              if(str[k].charAt(str[k].length()-1)=='.' || str[k].charAt(str[k].length()-1)==',')
             d=str[k].substring(0,str[k].length()-1);
              else
                  d=str[k].substring(0,str[k].length());
             cor.setText(d);
         }
        }
         else if(x<total)
         {
             k=0;
         }
        else
         {
           
            JOptionPane.showMessageDialog(this, "Your Final score is "+score+"out of "+words);
            new menuform(user).setVisible(true);
          this.dispose();
         }
        
    }//GEN-LAST:event_skipActionPerformed

    private void r2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2ActionPerformed
        // TODO add your handling code here:
        
        
        String inp;
        inp = text1.getText();
       

String dup;

//     highlighter = ta1.getHighlighter();
//    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
//     
//    
//        try {
//            //            int startIndex = s.indexOf(inp);
////            int endIndex = startIndex + inp.length();
////System.out.println(startIndex+" "+endIndex);
//highlighter.addHighlight(0, 3, painter);
//        } catch (BadLocationException ex) {
//            Logger.getLogger(vowelsform1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//       


        
for(i=0;i<str1.length;i++)
{
    String d;
d=str[i].substring(0,str[i].length()-1);
    if(str[i].charAt(str[i].length()-1)=='.' || str[i].charAt(str[i].length()-1)==',')
    {
        dup=str1[i].substring(0,str1[i].length()-1);
        if(dup.equals(inp)&&str[i].contains("*") && i==k)
{
      str[i]=str[i].replace(d,inp);
temp=1;  
x++;
break;
    }
    }
if(str1[i].equals(inp)&&str[i].contains("*") && i==k)
    
{
str[i]=str[i].replace(str[i],inp);
temp=1;
x++;

break;
}
}
if(temp==1)
{
score=score+1;
if(x<total)
skipActionPerformed(evt);
else
{
    cor.setText("");
    over=1;
   // JOptionPane.showMessageDialog(this,"GAME IS OVER","MSG", JOptionPane.PLAIN_MESSAGE);
    //JOptionPane.showMessageDialog(this,"your score is "+score+" out of "+words ,"MSG", JOptionPane.PLAIN_MESSAGE);
}
temp=0;

    
}
StringBuilder sb2 = new StringBuilder();
	
for (String ch: str)
{
	
sb2.append(ch);
	
sb2.append(" ");	
}
 String dstr1=sb2.toString();
ta1.setText(dstr1);
//l1.setText("your score is "+score+" out of "+words);
text1.setText("");
if(over==1)
{
     JOptionPane.showMessageDialog(this, "Your Final score is "+score+"out of "+words);
            new menuform(user).setVisible(true);
          this.dispose();
}
 try {
     highlighter = ta1.getHighlighter();
    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
     
    
            
            int startIndex = s.indexOf(inp);
            int endIndex = startIndex + inp.length();
         
            highlighter.addHighlight(startIndex, endIndex, painter);
        } catch (BadLocationException ex) {
           // ex.printStackTrace();
           JOptionPane.showMessageDialog(this, "Wrong Word");
           
        }
    
    }//GEN-LAST:event_r2ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException  {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vowelsform1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         //</editor-fold>
         /* Create and display the form */
         
        //</editor-fold>

        /* Create and display the form */
        
         
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new vowelsform1().setVisible(true);
               
            }
        });
    }
    public void call(int level) throws FileNotFoundException
    {
        
       try
       {
         String[] pre={"is","as","and","in","on","the","of","to","am","he","she","or","a","will","an","they","them"};
        int sw;
        Random ran = new Random();
        Preferences userPrefs = Preferences.userRoot().node("sample");
         String retrievedValue = userPrefs.get("user", "default_value_if_not_found");
         JOptionPane.showMessageDialog(this,retrievedValue ,"switch", JOptionPane.PLAIN_MESSAGE);
         
         
         

       
       
        
        sw=ran.nextInt(10);
        String levelpath="d:\\\\java\\\\level";
        levelpath=levelpath+String.valueOf(level);
        levelpath=levelpath+"\\\\para"+String.valueOf(sw)+".txt";
        //JOptionPane.showMessageDialog(this,levelpath ,"switch", JOptionPane.PLAIN_MESSAGE);
        file =  new File(levelpath); 
             
 
    Scanner sc = new Scanner(file); 
    
  
    while (sc.hasNextLine()) 
     {
      s=s+sc.nextLine();
      s=s+" ";//if we keep \n then nextline first word nd this line lastword combines
} 
    
    str= s.split(" ");
str1 = s.split(" ");
Pattern p = Pattern.compile("[aeiouAEIOU]+");

for(i=0;i<str.length;i++)
{
cpre=0;
for(j=0;j<pre.length;j++)
{
if(str[i].equals(pre[j]))
{
cpre=1;
break;
}
}
if(cpre==0&&(str[i].charAt(0)>=97&&str[i].charAt(0)<=122))
{
 Matcher m = p.matcher(str[i]);
if(m.find())
{
str[i]=(str[i]).replace("a","*");
str[i]=(str[i]).replace("e","*");
str[i]=(str[i]).replace("i","*");
str[i]=(str[i]).replace("o","*");
str[i]=(str[i]).replace("u","*");
}
}
}

StringBuilder sb = new StringBuilder();
	
for (String ch: str)
{
	
sb.append(ch);
	
sb.append(" ");	
}
String dstr=sb.toString();
ta1.setText(dstr);

Set<String> myset = new HashSet<>();
 Collections.addAll(myset,str);
StringBuilder sb1 = new StringBuilder();
	
for (String ch: myset)
{
	
sb1.append(ch);
	
sb1.append(" ");	
}
 dstr=sb1.toString();
String[] das=dstr.split(" ");
         for (String da : das) {
             if (da.contains("*")) {
                 words++;
             }
         }
         for (String str2 : str) {
             
             if (str2.contains("*")) {
                 cor.setText(str2);
                 break;
             }
             k++;
         }
         for(int f=0;f<str.length;f++)
         {
             if(str[f].contains("*"))
             {
                 total++;
             }
         }
         
}
catch(Exception e)
{
    System.out.println(e.getMessage());
}

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JLabel clk;
    private javax.swing.JTextField cor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel l1;
    private javax.swing.JButton r2;
    private javax.swing.JButton skip;
    private javax.swing.JTextArea ta1;
    private javax.swing.JTextField text1;
    // End of variables declaration//GEN-END:variables
}
