
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SAI
 */
public class consonantsform1 extends javax.swing.JFrame {

    /**
    
     */
    int i,cpre=0,j,temp=0;
     private Highlighter highlighter;
private Highlighter.HighlightPainter painter;
    String s = new String();
    String[] str1;
    int score=0;
    String[] str ;
     File file;
    int words=0;
    int over=0;
    int k=0;
    ActionEvent evt;
    int cnt=180;
    
        
    public consonantsform1() {
       
        ActionListener actListner;
        clk = new JLabel();
        actListner = new ActionListener() {
            
            @Override
            
            public void actionPerformed(ActionEvent event) {
                
                
                clk.setText("remaining secs : "+cnt);
                //System.out.println(cnt);
                cnt=cnt-1;
                
                if(cnt==0)
                {
                    ((Timer)event.getSource()).stop();
                   // JOptionPane.showMessageDialog(,"Time up", "MSG",JOptionPane.PLAIN_MESSAGE);
                    JOptionPane.showMessageDialog(clk, "Time Up");
                    JOptionPane.showMessageDialog(clk, "Your Final score is "+score+" out of "+words);
                    
                 
                }
            }
            
        };
  Timer timer = new Timer(1000, actListner);
 

  timer.start();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta1 = new javax.swing.JTextArea();
        text1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        clk = new javax.swing.JLabel();
        l1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        skip = new javax.swing.JButton();
        r2 = new javax.swing.JButton();
        cor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ta1.setEditable(false);
        ta1.setColumns(20);
        ta1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        ta1.setLineWrap(true);
        ta1.setRows(5);
        ta1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(ta1);

        jButton1.setText("replace all");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        clk.setText("remaining secs :");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("concealed word");

        skip.setText("skip");
        skip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipActionPerformed(evt);
            }
        });

        r2.setText("replace");
        r2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r2ActionPerformed(evt);
            }
        });

        cor.setEditable(false);
        cor.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clk, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(cor, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(r2)
                    .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(skip))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addComponent(jButton2)))
                .addContainerGap(193, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clk)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skip)
                    .addComponent(cor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jButton1)
                    .addComponent(r2))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String inp;
        inp = text1.getText();


        
String dup;
        
for(i=0;i<str1.length;i++)
{
    String d;
d=str[i].substring(0,str[i].length()-1);
    if(str[i].charAt(str[i].length()-1)=='.' || str[i].charAt(str[i].length()-1)==',')
    {
        dup=str1[i].substring(0,str1[i].length()-1);
        if(dup.equals(inp)&&str[i].contains("*") && i==k)
{
      str[i]=str[i].replace(d,inp);
temp=1;  
    }
    }
if(str1[i].equals(inp)&&str[i].contains("*"))
{
str[i]=str[i].replace(str[i],inp);
temp=1;
 
}
}
if(temp==1)
{
score=score+1;
if(score<words)
skipActionPerformed(evt);
else
{
    cor.setText("");
    over=1;
}
temp=0;
}
StringBuilder sb2 = new StringBuilder();
	
for (String ch: str)
{
	
sb2.append(ch);
	
sb2.append(" ");	
}
 String dstr1=sb2.toString();
ta1.setText(dstr1);
l1.setText("your score is "+score+" out of "+words);
text1.setText("");

if(over==1)
{
     JOptionPane.showMessageDialog(this, "Your Final score is "+score+" out of "+words);
            new menuform("user").setVisible(true);
          this.dispose();
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this,"your score is "+score+" out of "+words ,"MSG", JOptionPane.PLAIN_MESSAGE);
        Preferences userPrefs = Preferences.userRoot().node("sample");
         String retrievedValue = userPrefs.get("user", "default_value_if_not_found");
         userPrefs.putInt(retrievedValue, score);
         int le,ti;
         // JOptionPane.showMessageDialog(this,"your time "+cnt ,"MSG", JOptionPane.PLAIN_MESSAGE);
         
         if(score<10)
         {
             le=1;
         }
         else if(score>10 && score<20)
         {
             le=2;
         }
         else
         {
             le=3;
         }
         
              if(score*7>=(180-cnt))
         {
             ti=3;
         }
         
             else if(score*9>=(180-cnt))
             {
                 ti=2;
             }
         else
             {
                 ti=1;
             }
         userPrefs.putInt("con", le);
         userPrefs.putInt("conti", ti);
         
         
         userPrefs.putInt("cont",cnt);
       
         try {
             
             Thread.sleep(1000);
           
         } catch (InterruptedException ex) {
             Logger.getLogger(consonantsform1.class.getName()).log(Level.SEVERE, null, ex);
         }
           new menuform("user").setVisible(true);
          this.dispose();
       
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void skipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipActionPerformed
        // TODO add your handling code here:
        
        if(k<str.length-1)
        {
        k++;
        
         while(!str[k].contains("*") && k<str.length)
         {
             k++;
         }
         if(k<=str.length)
         {
              String d = null;
              if(str[k].charAt(str[k].length()-1)=='.' || str[k].charAt(str[k].length()-1)==',')
             d=str[k].substring(0,str[k].length()-1);
              else
                  d=str[k].substring(0,str[k].length());
             cor.setText(d);
         }
        }
         else if(score<words)
         {
             k=0;
         }
        else
         {
           
            JOptionPane.showMessageDialog(this, "Your Final score is "+score+" out of "+words);
            new menuform("user").setVisible(true);
          this.dispose();
         }
        
    }//GEN-LAST:event_skipActionPerformed

    private void r2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r2ActionPerformed
        // TODO add your handling code here:
        
        String inp;
        inp = text1.getText();

String dup;
        
for(i=0;i<str1.length;i++)
{
    String d;
d=str[i].substring(0,str[i].length()-1);
    if(str[i].charAt(str[i].length()-1)=='.' || str[i].charAt(str[i].length()-1)==',')
    {
        dup=str1[i].substring(0,str1[i].length()-1);
        if(dup.equals(inp)&&str[i].contains("*") && i==k)
{
      str[i]=str[i].replace(d,inp);
temp=1;  

    }
    }
if(str1[i].equals(inp)&&str[i].contains("*") && i==k)
{
str[i]=str[i].replace(str[i],inp);
temp=1;
break;
}
}
if(temp==1)
{
score=score+1;
if(score<words)
skipActionPerformed(evt);
else
{
    cor.setText("");
    over=1;
}
temp=0;
}
StringBuilder sb2 = new StringBuilder();
	
for (String ch: str)
{
	
sb2.append(ch);
	
sb2.append(" ");	
}
 String dstr1=sb2.toString();
ta1.setText(dstr1);
l1.setText("your score is "+score+" out of "+words);
text1.setText("");
if(over==1)
{
     JOptionPane.showMessageDialog(this, "Your Final score is "+score+" out of "+words);
            new menuform("user").setVisible(true);
          this.dispose();
}

 try {
     highlighter = ta1.getHighlighter();
    painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
     
    
            
            int startIndex = s.indexOf(inp);
            int endIndex = startIndex + inp.length();
         
            highlighter.addHighlight(startIndex, endIndex, painter);
        } catch (BadLocationException ex) {
           // ex.printStackTrace();
           JOptionPane.showMessageDialog(this, "Wrong Word");
           
        }
    }//GEN-LAST:event_r2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(consonantsform1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(consonantsform1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(consonantsform1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consonantsform1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new consonantsform1().setVisible(true);
                
            }
        });
    }
     public void call(int level) throws FileNotFoundException
    {
        
         
         String[] pre={"is","as","and","in","on","the","of","to","am","he","she","or","a","will","an","they","them","was","if"};
 
        int sw;
        Random ran = new Random();
        Preferences userPrefs = Preferences.userRoot().node("sample");
         String retrievedValue = userPrefs.get("user", "default_value_if_not_found");
        
        
         sw=ran.nextInt(10);
        String levelpath="d:\\\\java\\\\level";
        levelpath=levelpath+String.valueOf(level);
        levelpath=levelpath+"\\\\para"+String.valueOf(sw)+".txt";
        //JOptionPane.showMessageDialog(this,levelpath ,"switch", JOptionPane.PLAIN_MESSAGE);
        file =  new File(levelpath); 

    Scanner sc = new Scanner(file); 
  
    while (sc.hasNextLine()) 
     {
      s=s+sc.nextLine();
      s=s+" ";//if we keep \n then nextline first word nd this line lastword combines
} 
    
    str= s.split(" ");
str1 = s.split(" ");

int c;
int l;
int[] check= new int[20];
String cons="bcdfghjklmnpqrstvwxyz";
for(i=0;i<str.length;i++)
{
c=ran.nextInt(str[i].length());

if(cons.contains(Character.toString(str[i].charAt(c))))
{
str[i]=str[i].replace((Character.toString(str[i].charAt(c))), "*");
}
else
{
    
int k=c;
int flag=0;
    while(!cons.contains(Character.toString(str[i].charAt(c))))
    {
        check[k]=1;
        c=ran.nextInt(str[i].length());
        k=c;
        for(int m=0;m<str[i].length();m++)
        {
            if(check[m]==1)
            {
                flag=flag+1;
            }
        }
        
        if(flag==str[i].length())
        {
            break;
        }
        else
        {
            flag=0;
        }
        
    }
    if(flag!=str[i].length())
    {
        str[i]=str[i].replace((Character.toString(str[i].charAt(c))), "*");
    }
  
}
}
StringBuilder sb = new StringBuilder();
	
for (String ch: str)
{
	
sb.append(ch);
	
sb.append(" ");	
}
String dstr=sb.toString();
ta1.setText(dstr);

Set<String> myset = new HashSet<>();
 Collections.addAll(myset,str);
StringBuilder sb1 = new StringBuilder();
	
for (String ch: myset)
{
	
sb1.append(ch);
	
sb1.append(" ");	
}
 dstr=sb1.toString();
String[] das=dstr.split(" ");
        for (String da : das) {
            if (da.contains("*")) {
                words++;
            }
        }
         for (String str2 : str) {
             
             if (str2.contains("*")) {
                 cor.setText(str2);
                 break;
             }
             k++;
         }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clk;
    private javax.swing.JTextField cor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l1;
    private javax.swing.JButton r2;
    private javax.swing.JButton skip;
    private javax.swing.JTextArea ta1;
    private javax.swing.JTextField text1;
    // End of variables declaration//GEN-END:variables
}
